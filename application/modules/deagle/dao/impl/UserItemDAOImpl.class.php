<?php
/**
 * DAO implementation: UserItemDAO
 * 
 * @author xucongbin
 * @since 2014-12-10
 * @package xkx
 * @version 1.0.0
 * @copyright Copyright (c) 2014 Baidu.com, Inc. All Rights Reserved.
 * @license Auto generated by Deagle 1.0.0
 */
class UserItemDAOImpl extends DatabaseDAO implements UserItemDAO{

    /**
     * delimiter for multiple strings
     */
    const DELIMIT = '###holmes###';

    /**
     * __construct
     * @param array $config
     * @param CacheEngine $cacheEngine
     * @param DBTemplate $dbTemplate
     */
    public function __construct($config, $cacheEngine, $dbTemplate){
        parent::__construct($config, $cacheEngine, $dbTemplate);
    }

    /**
     * insert UserItem
     * @param UserItem $userItem
     * @return UserItem $userItem
     * @throws DataAccessException
     */
    public function insert($userItem){
        $sql = 'INSERT INTO `user` (';
        $fields = array();
        $fields[] = '`id`';
        $fields[] = '`nick`';
        $fields[] = '`email`';
        $fields[] = '`is_email_verified`';
        $fields[] = '`intro`';
        $fields[] = '`avatar`';
        $fields[] = '`user_level`';
        $fields[] = '`tags`';
        $fields[] = '`accept_subscribe_email`';
        $fields[] = '`last_login_time`';
        $fields[] = '`id_card_no`';
        $fields[] = '`last_login_ip`';
        $fields[] = '`create_time`';
        $sql .= implode(",", $fields);
        $sql .= ') VALUES (';
        $values = array();
        $values[] = 'NULL';
        $values[] = '"'.StringUtil::mysqlEscape($userItem->getNick()).'"';
        $values[] = '"'.StringUtil::mysqlEscape($userItem->getEmail()).'"';
        $values[] = $userItem->getIsEmailVerified();
        $values[] = '"'.StringUtil::mysqlEscape($userItem->getIntro()).'"';
        $values[] = '"'.StringUtil::mysqlEscape(json_encode($userItem->getAvatar())).'"';
        $values[] = $userItem->getUserLevel();
        $values[] = '"'.StringUtil::mysqlEscape(json_encode($userItem->getTags())).'"';
        $values[] = $userItem->getAcceptSubscribeEmail();
        $values[] = '"'.StringUtil::mysqlEscape($userItem->getLastLoginTime()).'"';
        $values[] = '"'.StringUtil::mysqlEscape($userItem->getIdCardNo()).'"';
        $values[] = '"'.StringUtil::mysqlEscape($userItem->getLastLoginIp()).'"';
        $values[] = '"'.StringUtil::mysqlEscape($userItem->getCreateTime()).'"';
        $sql .= implode(',', $values);
        $sql .= ')';
        $id = $this->dbTemplate->insert($sql);
        $userItem->setId($id);
        return $userItem;
    }

    /**
     * insert many UserItem
     * @param array<UserItem> $userItemList
     * @return boolean, true on success & false on failed
     * @throws DataAccessException
     */
    public function insertMany($userItemList){
        $ret = true;
        foreach ($userItemList as $userItem){
            $ret = $ret && $this->insert($userItem);
        }
        return $ret;
    }

    /**
     * update UserItem
     * @param UserItem $userItem
     * @return boolean, true on success & false on failed
     * @throws DataAccessException
     */
    public function update($userItem){
        $sql = 'UPDATE `user` SET ';
        $set = array();
        $set[] = '`nick`="'.StringUtil::mysqlEscape($userItem->getNick()).'"';
        $set[] = '`email`="'.StringUtil::mysqlEscape($userItem->getEmail()).'"';
        $set[] = '`is_email_verified`='.$userItem->getIsEmailVerified();
        $set[] = '`intro`="'.StringUtil::mysqlEscape($userItem->getIntro()).'"';
        $set[] = '`avatar`="'.StringUtil::mysqlEscape(json_encode($userItem->getAvatar())).'"';
        $set[] = '`user_level`='.$userItem->getUserLevel();
        $set[] = '`tags`="'.StringUtil::mysqlEscape(json_encode($userItem->getTags())).'"';
        $set[] = '`accept_subscribe_email`='.$userItem->getAcceptSubscribeEmail();
        $set[] = '`last_login_time`="'.StringUtil::mysqlEscape($userItem->getLastLoginTime()).'"';
        $set[] = '`id_card_no`="'.StringUtil::mysqlEscape($userItem->getIdCardNo()).'"';
        $set[] = '`last_login_ip`="'.StringUtil::mysqlEscape($userItem->getLastLoginIp()).'"';
        $set[] = '`create_time`="'.StringUtil::mysqlEscape($userItem->getCreateTime()).'"';
        $sql .= implode(',', $set);
        $sql .= ' WHERE `id`=';
        $sql .= '"'.StringUtil::mysqlEscape($userItem->getId()).'"';
        $sql .= ' LIMIT 1';
        return $this->dbTemplate->execute($sql);
    }

    /**
     * update many UserItem
     * @param array<UserItem> $userItemList
     * @return boolean, true on success & false on failed
     * @throws DataAccessException
     */
    public function updateMany($userItemList){
        $ret = true;
        foreach ($userItemList as $userItem){
            $ret = $ret && $this->update($userItem);
        }
        return $ret;
    }

    /**
     * delete UserItem
     * @param UserItem $userItem
     * @return boolean, true on success & false on failed
     * @throws DataAccessException
     */
    public function delete($userItem){
        throw new UnImplementException('this method is currently unimplemented');
        $sql = 'DELETE FROM `user` WHERE `id`=';
        $sql .= '"'.StringUtil::mysqlEscape($userItem->getId()).'"';
        $sql .= ' LIMIT 1';
        return $this->dbTemplate->execute($sql);
    }

    /**
     * delete many UserItem
     * @param array<UserItem> $userItemList
     * @return boolean, true on success & false on failed
     * @throws DataAccessException
     */
    public function deleteMany($userItemList){
        $ret = true;
        foreach ($userItemList as $userItem){
            $ret = $ret && $this->delete($userItem);
        }
        return $ret;
    }

    /**
     * get by Id
     * @param string $id
     * @return UserItem $userItem
     * @throws DataAccessException
     */
    public function getById($id){
        $sql = 'SELECT * FROM `user` WHERE `id`=';
        $sql .= '"'.StringUtil::mysqlEscape($id).'"';
        $sql .= ' LIMIT 1';
        $instance = NULL;
        $ret = $this->dbTemplate->query($sql);
        if (count($ret) > 0){
            $instance = $this->build($ret[0]);
        }
        return $instance;
    }

    /**
     * get list by id list
     * @param array<string> $idList
     * @return array<UserItem> $userItemList
     * @throws DataAccessException
     */
    public function getListByIdList($idList){
        if (count($idList) < 1){
            return array();
        }
        $sql = 'SELECT * FROM `user` WHERE `id` IN ';
        $tmpIdList = array();
        foreach ($idList as $id){
            $tmpIdList[] = '"'.StringUtil::mysqlEscape($id).'"';
        }
        $sql .= '('.implode(',', $tmpIdList).')';
        $list = array();
        $ret = $this->dbTemplate->query($sql);
        if (count($ret) > 0){
            foreach ($ret as $row){
                $list[] = $this->build($row);
            }
        }
        return $list;
    }


    /**
     * get list by condition
     * @param array $condition
     * @param string $orderBy
     * @param string $order
     * @param int $offset
     * @param int $limit
     * @return array<UserItem> $UserItemList
     * @throws DataAccessException
     */
    public function getList($condition, $orderBy, $order, $offset, $limit){
        $sql = 'SELECT * FROM `user` WHERE ';
        $sql .= implode(' AND ', $condition);
        $this->sqlOrderBy($sql, $orderBy, $order);
        $this->sqlLimit($sql, $offset, $limit);
        $list = array();
        $ret = $this->dbTemplate->query($sql);
        if (count($ret) > 0){
            foreach ($ret as $row){
                $list[] = $this->build($row);
            }
        }
        return $list;
    }

    /**
     * get count by condition
     * @param array $condition
     * @return int $count
     * @throws DataAccessException
     */
    public function getCount($condition){
        $sql = 'SELECT count(1) as cnt FROM `user` WHERE ';
        $sql .= implode(' AND ', $condition);
        $ret = $this->dbTemplate->query($sql);
        return $ret[0]['cnt'];
    }

    /**
     * get list by user-defined sql
     * @param string $sql
     * @return array<UserItem> $userItemList
     * @throws DataAccessException
     */
    public function getListBySql($sql){
        $list = array();
        $ret = $this->dbTemplate->query($sql);
        if (count($ret) > 0){
            foreach ($ret as $row){
                $list[] = $this->build($row);
            }
        }
        return $list;
    }

    /**
     * build a/an UserItem from db record
     * @param array $row
     * @return UserItem $userItem
     */
    public function build($row){
        $userItem = new UserItem();
        $userItem->setId($row['id']);
        $userItem->setNick(trim($row['nick']));
        $userItem->setEmail(trim($row['email']));
        $userItem->setIsEmailVerified(trim($row['is_email_verified']));
        $userItem->setIntro(trim($row['intro']));
        $tmp = trim($row['avatar']);
        if ($tmp === ''){
            $userItem->setAvatar(array());
        } else {
            $userItem->setAvatar(json_decode($tmp, true));
        }
        $userItem->setUserLevel(trim($row['user_level']));
        $tmp = trim($row['tags']);
        if ($tmp === ''){
            $userItem->setTags(array());
        } else {
            $userItem->setTags(json_decode($tmp, true));
        }
        $userItem->setAcceptSubscribeEmail(trim($row['accept_subscribe_email']));
        $userItem->setLastLoginTime(trim($row['last_login_time']));
        $userItem->setIdCardNo(trim($row['id_card_no']));
        $userItem->setLastLoginIp(trim($row['last_login_ip']));
        $userItem->setCreateTime(trim($row['create_time']));
        return $userItem;
    }

}
